//-----------------------------------------------------------------------------
// SCD30 wrapper - CO2, Temperature & Humidity sensor
//-----------------------------------------------------------------------------
// SCD30 I2C_ADDR 0x61
//-----------------------------------------------------------------------------

#include "Sensors/SparkFunSCD30.h"

class SCD30_Wrapper : public TSensorWrapper {

public:
   SCD30_Wrapper(const char *InName) : TSensorWrapper(InName) {}

   SCD30 Sensor;

   TAverage CO2;           // Temperature in ppm
   TAverage Temperature;   // Temperature in degrees C
   TAverage Humidity;      // Humidity in percent

   //--------------------------------------------------------------------------
   void Setup()
   {
      if (Sensor.begin() == false) {
         printf("Sensor %s not detected, check connections.", Name);
         return;
      }

      // The SCD30 has data ready every two seconds

// SetOptions
//  airSensor.setMeasurementInterval(16); //Change number of seconds between measurements: 2 to 1800 (30 minutes), stored in non-volatile memory of SCD30
//
//  //While the setting is recorded, it is not immediately available to be read.
//  delay(200);
//
//  int interval = airSensor.getMeasurementInterval();
//  Serial.print("Measurement Interval: ");
//  Serial.println(interval);
//
//  //My desk is ~1600m above sealevel
//  airSensor.setAltitudeCompensation(1600); //Set altitude of the sensor in m, stored in non-volatile memory of SCD30
//
//  //Read altitude compensation value
//  unsigned int altitude = airSensor.getAltitudeCompensation();
//  Serial.print("Current altitude: ");
//  Serial.print(altitude);
//  Serial.println("m");
//
//  //Pressure in Boulder, CO is 24.65inHg or 834.74mBar
//  airSensor.setAmbientPressure(835); //Current ambient pressure in mBar: 700 to 1200, will overwrite altitude compensation
//
//  airSensor.setTemperatureOffset(5); //Optionally we can set temperature offset to 5°C, stored in non-volatile memory of SCD30
//
//  //Read temperature offset
//  float offset = airSensor.getTemperatureOffset();
//  Serial.print("Current temp offset: ");
//  Serial.print(offset, 2);
//  Serial.println("C");

// AutoCalibrate
//    Serial.print("Auto calibration set to ");
//    if (airSensor.getAutoSelfCalibration() == true)
//        Serial.println("true");
//    else                                                 SetupSucces();
//        Serial.println("false");                      }

   //--------------------------------------------------------------------------
   void Clear()
   {
      UpdateStable();

      CO2.Clear();
      Humidity.Clear();
   }

   //--------------------------------------------------------------------------
   bool Read()
   {
      if (IsReadEnabled() == false) return false; // no data read


      if (Sensor.dataAvailable()) {
         CO2.Add(Sensor.getCO2());
         Temperature.Add(Sensor.getTemperature());
         Humidity.Add(Sensor.getHumidity());
         return true;   // Success
      }

      return false;  // no data read (available)
   }

   //--------------------------------------------------------------------------
   void Dump(bool Full=false)
   {
      printf("%s Active: %d, CO2: %d, Humidity: %.2f %%, Temperature %.2f C\n",
            Name, IsActive(), (int)CO2.Get(), Humidity.Get(), Temperature.Get());

      if (Full && IsActive()) {
      }
   }
};
